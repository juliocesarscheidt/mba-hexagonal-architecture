
type Query {
	customerOfId(id: ID!): Customer
	partnerOfId(id: ID!): Partner
}

type Mutation {
	createCustomer(input: CustomerInput): Customer
	createEvent(input: EventInput): Event
	createPartner(input: PartnerInput): Partner
	subscribeCustomerToTicket(input: SubscribeInput): Subscribe
}

type Customer {
	id: ID!
	name: String
	email: String
	cpf: String
}

input CustomerInput {
	name: String
	email: String
	cpf: String
}

type Event {
	id: ID!
	date: String!
	name: String!
	totalSpots: Int!
	partnerId: ID
}

input EventInput {
	date: String
	name: String
	totalSpots: Int
	partnerId: ID
}

type Partner {
	id: ID!
	cnpj: String
	name: String
	email: String
}

input PartnerInput {
	cnpj: String
	name: String
	email: String
}

type Subscribe {
	eventId: ID
	ticketStatus: String
	reservationDate: String
}

input SubscribeInput {
	customerId: ID
	eventId: ID
}
